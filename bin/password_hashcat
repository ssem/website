#!/usr/bin/env python
import os
import sys
import pymongo
import argparse

def run(hashcat, hashtype):
    dbname = os.path.basename(hashcat)
    stat_file = os.path.join('/static/stats/', dbname)
    client = pymongo.MongoClient('localhost', 27017)
    db = client['website']
    db['dumps'].create_index([('name', pymongo.ASCENDING)], unique=True)
    db[dbname].drop()
    db[dbname].create_index('hash')
    db[dbname].create_index('password')
    try:
        db['dumps'].insert({
            'name':dbname,
            'hashtype':hashtype,
            'hash_count':0,
            'cracked':0,
            'stat_file':stat_file})
    except:pass
    for line in open(hashcat, 'r'):
        try:
            if ':' in line:
                hash_string, password = line.split(':', 1)
            else:
                hash_string = line.rstrip('\r\n')
                password = ""
        except:
            sys.stdout.write('[Error] format %s\n' % line)
        db[dbname].insert({'hash':hash_string,
                           'password':password.rstrip('\r\n')})
    # update hash count
    count = db[dbname].find().count()
    db['dumps'].update_one({'name': dbname}, {'$set': {'hash_count': count}})
    # update cracked
    cracked = db[dbname].find({'password':{'$ne':""}}).count()
    db['dumps'].update_one({'name': dbname}, {'$set': {'cracked': cracked}})
    # create empty stat file
    open('../website/' + stat_file, 'w+')

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("hashcat", help="path to hashcat file")
    parser.add_argument("hashtype", help="hash type of hash dump")
    args = parser.parse_args()
    run(args.hashcat, args.hashtype)
